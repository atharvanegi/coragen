{"version":3,"sources":["components/Contexts/SettingContext.js","components/Navbar.js","components/SearchBox/index.js","components/ComparisonPrameters.js","components/DataDisplay/DataSlide.js","components/DataDisplay/index.js","components/SettingsSidebar/index.js","App.js","reportWebVitals.js","index.js"],"names":["SettingsContext","createContext","SettingsProvider","_ref","children","settings","setSettings","useState","browser","searchAlgorithm","reranker","isEnabled","prompt","method","queryReformulation","generator","model","apiKey","isSettingsOpen","isLoading","attributes","huggingface","generatorDeployment","generatorModels","selectedGeneratorModel","generatorLoading","generatorParams","maxNewTokens","temperature","topP","evaluatorEnabled","evaluatorDeployment","useGeneratorApiKey","evaluatorApiKey","evaluatorModels","selectedEvaluatorModel","evaluatorLoading","evaluatorParams","batchSize","maxTokens","llmJudge","evaluator","modelVersion","enabledCategories","prompts","searchResults","React","createElement","Provider","value","useSettings","context","useContext","Error","Navbar","className","onClick","toggleSettings","prev","aria-label","Settings","size","SearchBox","_settings$parameters3","_settings$reranker2","searchText","setSearchText","onSubmit","async","_settings$parameters","e","preventDefault","trim","selectedParameters","parameters","filter","param","selected","map","name","length","_settings$reranker","_settings$queryReform","_settings$llmJudge","_settings$llmJudge$pr","_settings$llmJudge$en","_settings$llmJudge2","_settings$llmJudge2$e","_settings$llmJudge3","_settings$llmJudge3$p","_settings$llmJudge$en2","_settings$llmJudge4","_settings$llmJudge4$e","_settings$llmJudge5","_settings$llmJudge5$p","_settings$llmJudge$en3","_settings$llmJudge6","_settings$llmJudge6$e","response","fetch","headers","body","JSON","stringify","query","type","algorithm","version","evaluation","categories","ok","data","json","results","error","console","Search","onChange","target","placeholder","disabled","buttonStateClass","_settings$parameters2","some","p","Loader","ComparisionParameter","newParameter","setNewParameter","id","Date","now","Tag","Plus","key","toggleParameter","parameterId","stopPropagation","X","ArticleContent","content","isExpanded","setIsExpanded","shouldShowButton","displayText","slice","Fragment","ChevronUp","ChevronDown","DataSlide","_ref2","_content$summary","isActive","isFullscreen","onToggleFullscreen","onCrossAttributeCompare","activeCrossComparison","otherSlidesData","selectedSummary","setSelectedSummary","comparisonMode","setComparisonMode","useEffect","getScoreColor","score","mode","opacity","parseFloat","sortedArticles","articles","sort","a","b","_selectedSummary$arti","_selectedSummary$arti2","scoreA","articleScores","isInCrossComparison","sourceType","Minimize2","Maximize2","summary","item","_activeCrossCompariso3","_activeCrossCompariso4","backgroundColor","crossAttributeScores","_activeCrossCompariso","_activeCrossCompariso2","crossScore","handleSummaryClick","style","text","confidence","toFixed","source_count","title","FileText","newMode","toggleComparisonMode","Shuffle","article","_selectedSummary$arti4","_selectedSummary$arti3","groundednessScore","url","href","rel","DataDisplay","currentPage","setCurrentPage","fullscreenSlide","setFullscreenSlide","isTransitioning","setIsTransitioning","setActiveCrossComparison","document","overflow","handleEsc","event","window","addEventListener","removeEventListener","handleCrossAttributeCompare","allSlides","Object","entries","category","totalPages","Math","ceil","currentSlides","handlePageChange","newPage","setTimeout","ChevronLeft","Array","from","_","i","ChevronRight","slide","s","isInvolved","SettingsSidebar","generatorModelInput","setGeneratorModelInput","evaluatorModelInput","setEvaluatorModelInput","browsers","description","icon","Chrome","requiresAlgorithm","Database","algorithms","rerankMethods","models","versions","modelDeploymentTypes","Globe","HardDrive","judgeCategories","defaultPrompt","handleAddHuggingFaceGeneratorModel","_prev$huggingface","_prev$huggingface2","_prev$huggingface2$ge","updatedSettings","isLoaded","handleAddHuggingFaceEvaluatorModel","_prev$huggingface3","_prev$huggingface4","_prev$huggingface4$ev","removeHuggingFaceModel","modelId","_prev$huggingface5","_prev$huggingface6","modelListKey","selectedModelKey","updatedModels","selectedModel","loadHuggingFaceModel","Promise","resolve","checked","algo","renderGeneratorSettings","_settings$huggingface3","_settings$huggingface4","_settings$huggingface5","_settings$huggingface6","_settings$huggingface11","_settings$huggingface12","_settings$huggingface13","_settings$huggingface14","_settings$huggingface15","_settings$huggingface16","_models$find","Zap","_settings$huggingface","_settings$huggingface2","htmlFor","_settings$huggingface7","_settings$huggingface8","_settings$huggingface9","_settings$huggingface10","Download","min","max","_prev$huggingface7","parseInt","step","_prev$huggingface8","_prev$huggingface9","find","m","HelpCircle","renderReranker","_settings$reranker3","SortDesc","rows","_settings$reranker4","_settings$reranker5","renderQueryReformulation","_settings$queryReform2","_settings$queryReform3","FileSearch","renderHuggingFaceEvaluator","_settings$huggingface17","_settings$huggingface18","_settings$huggingface21","_settings$huggingface22","_settings$huggingface23","_settings$huggingface24","_settings$huggingface25","_settings$huggingface26","_settings$huggingface31","_settings$huggingface32","_settings$huggingface33","_settings$huggingface34","_settings$huggingface35","_settings$huggingface36","Cpu","_settings$huggingface19","_settings$huggingface20","_settings$huggingface27","_settings$huggingface28","_settings$huggingface29","_settings$huggingface30","_prev$huggingface10","_prev$huggingface11","_prev$huggingface12","Terminal","_prev$llmJudge","_prev$llmJudge$enable","_prev$llmJudge2","_prev$llmJudge2$enabl","_prev$llmJudge3","_prev$llmJudge4","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.62fb1273.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst SettingsContext = createContext();\n\nexport const SettingsProvider = ({ children }) => {\n  const [settings, setSettings] = useState({\n    browser: 'google',\n    searchAlgorithm: 'TFIDF',\n\n    // Reranker settings\n    reranker: {\n      isEnabled: false,\n      prompt: 'Rerank the documents based on relevance to the query while maintaining diversity of information.',\n      method: 'pointwise'\n    },\n\n    // Query Reformulation settings\n    queryReformulation: {\n      isEnabled: false,\n      prompt: 'Analyze the user query and reformulate it to improve search results while maintaining the original intent.'\n    },\n\n    generator: 'gpt-4',\n    model: 'gpt-4-turbo',\n    apiKey: '',\n    \n    // Controls the settings sidebar visibility\n    isSettingsOpen: false,\n    isLoading: false,\n    \n    attributes: [],\n    \n    // HuggingFace settings\n    huggingface: {\n      // Generator settings\n      generatorDeployment: 'api',\n      apiKey: '',\n      generatorModels: [],\n      selectedGeneratorModel: null,\n      generatorLoading: null,\n      generatorParams: {\n        maxNewTokens: 512,\n        temperature: 0.7,\n        topP: 0.95\n      },\n      \n      // Evaluator settings\n      evaluatorEnabled: false,\n      evaluatorDeployment: 'api',\n      useGeneratorApiKey: true,\n      evaluatorApiKey: '',\n      evaluatorModels: [],\n      selectedEvaluatorModel: null,\n      evaluatorLoading: null,\n      evaluatorParams: {\n        batchSize: 4,\n        temperature: 0.3,\n        maxTokens: 128\n      }\n    },\n    \n    llmJudge: {\n      evaluator: {\n        model: 'gpt-4',\n        modelVersion: 'gpt-4-turbo',\n        apiKey: ''\n      },\n    \n      enabledCategories: {\n        'Context Relevance': true,\n        'Answer Relevance': true,\n        'Answer Groundedness': true\n      },\n      \n      prompts: {\n        'Context Relevance': 'Is the retrieved context relevant to the query?',\n        'Answer Relevance': 'Is the answer relevant to the query?',\n        'Answer Groundedness': 'Is the response supported by the context?'\n      }\n    },\n\n    searchResults: null\n  });\n\n  return (\n    <SettingsContext.Provider value={{ \n      settings, \n      setSettings\n    }}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport const useSettings = () => {\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within SettingsProvider');\n  }\n  return context;\n};\n\nexport default SettingsContext;\n","import React from 'react';\nimport { useSettings } from './Contexts/SettingContext';\nimport { Settings } from 'lucide-react';\nimport '../styles/Navbar.css';\n\nconst Navbar = () => {\n  const { settings, setSettings } = useSettings();\n\n  const toggleSettings = () => {\n    setSettings(prev => ({\n      ...prev, \n      isSettingsOpen: !prev.isSettingsOpen\n    }));\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <div className=\"navbar-container\">\n        <div className=\"navbar-logo\">\n          <span className=\"logo-highlight\">CoRAGen</span>\n        </div>\n\n        <div className=\"navbar-links\">\n          <button \n            className=\"settings-button\"\n            onClick={toggleSettings}\n            aria-label=\"Toggle settings panel\"\n          >\n            <Settings \n              size={24} \n              className={`settings-icon ${settings.isSettingsOpen ? 'active' : ''}`}\n            />\n          </button>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;","import React, { useState } from 'react';\nimport { Search, Loader } from 'lucide-react';\nimport { useSettings } from '../Contexts/SettingContext';\nimport './SearchBox.css';\n\nconst SearchBox = ({ searchText, setSearchText }) => {\n  const { settings, setSettings } = useSettings();\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    if (!searchText.trim()) return;\n\n    const selectedParameters = settings.parameters?.filter(param => param.selected)\n                                                 .map(param => param.name) || [];\n    \n    if (selectedParameters.length === 0) {\n      return;\n    }\n\n    setSettings(prev => ({ ...prev, isLoading: true }));\n\n    try {\n      const response = await fetch('http://localhost:5001/api/search', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${settings.apiKey}` \n        },\n        body: JSON.stringify({\n          // Search query\n          query: searchText.trim(),\n\n          // Browser settings with algorithm for pyterrier/pyserini\n          browser: {\n            type: settings.browser || 'google',\n            ...(settings.browser === 'pyterrier' || settings.browser === 'pyserini' \n              ? { algorithm: settings.searchAlgorithm } \n              : {})\n          },\n\n          // Reranker settings if enabled\n          ...(settings.reranker?.isEnabled ? {\n            reranker: {\n              prompt: settings.reranker.prompt,\n              method: settings.reranker.method\n            }\n          } : {}),\n\n          ...(settings.queryReformulation?.isEnabled ? {\n            queryReformulation: {\n              prompt: settings.queryReformulation.prompt\n            }\n          } : {}),\n\n          // Selected comparison parameters\n          attributes: selectedParameters,\n\n          // Generator settings\n          generator: {\n            model: settings.generator || 'gpt-4',\n            version: settings.model || 'gpt-4-turbo',\n            apiKey: settings.apiKey\n          },\n\n          // Evaluation settings\n          evaluation: {\n            evaluator: settings.llmJudge.evaluator,\n            categories: [\n              {\n                name: 'Context Relevance',\n                prompt: settings.llmJudge?.prompts?.['Context Relevance'],\n                isEnabled: settings.llmJudge?.enabledCategories?.['Context Relevance'] ?? true\n              },\n              {\n                name: 'Answer Relevance',\n                prompt: settings.llmJudge?.prompts?.['Answer Relevance'],\n                isEnabled: settings.llmJudge?.enabledCategories?.['Answer Relevance'] ?? true\n              },\n              {\n                name: 'Answer Groundedness',\n                prompt: settings.llmJudge?.prompts?.['Answer Groundedness'],\n                isEnabled: settings.llmJudge?.enabledCategories?.['Answer Groundedness'] ?? true\n              }\n            ]\n          }\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Search request failed');\n      }\n\n      const data = await response.json();\n      \n      if (data && data.results) {\n        setSettings(prev => ({\n          ...prev,\n          searchResults: data.results,\n          isLoading: false\n        }));\n      }\n\n    } catch (error) {\n      console.error('Search error:', error);\n      setSettings(prev => ({ ...prev, isLoading: false }));\n    }\n  };\n\n  // Determine button state class based on loading and validity\n  const buttonStateClass = () => {\n    if (settings.isLoading) return 'loading';\n    if (!searchText.trim() || !settings.parameters?.some(p => p.selected)) {\n      return 'disabled';\n    }\n    return '';\n  };\n\n  return (\n    <div className=\"search-container\">\n      <form className=\"search-form\" onSubmit={handleSearch}>\n        <div className=\"search-input-wrapper\">\n          <Search className=\"search-icon\" size={24} />\n          <input\n            type=\"text\"\n            value={searchText}\n            onChange={(e) => setSearchText(e.target.value)}\n            placeholder=\"Enter your search query...\"\n            className=\"search-input\"\n            disabled={settings.isLoading}\n          />\n        </div>\n        <button \n          type=\"submit\" \n          className={`search-button ${buttonStateClass()}`}\n          disabled={settings.isLoading || !searchText.trim() || !settings.parameters?.some(p => p.selected)}\n        >\n          {settings.isLoading ? (\n            <Loader className=\"animate-spin\" size={24} />\n          ) : (\n            'Search'\n          )}\n        </button>\n      </form>\n      <div className=\"search-info\">\n        Using {settings.browser || 'Google'} Search\n        {(settings.browser === 'pyterrier' || settings.browser === 'pyserini') && \n          ` with ${settings.searchAlgorithm}`}\n        {settings.reranker?.isEnabled && \n          ` | Reranking: ${settings.reranker.method}`}\n      </div>\n    </div>\n  );\n};\n\nexport default SearchBox;","import React, { useState } from 'react';\nimport { useSettings } from './Contexts/SettingContext';\nimport { Tag, Plus, X } from 'lucide-react';\nimport '../styles/ComparisonParameters.css';\n\nconst ComparisionParameter = () => {\n  const { settings, setSettings } = useSettings();\n  const [newParameter, setNewParameter] = useState('');\n\n  const handleAdd = (e) => {\n    e.preventDefault();\n    if (!newParameter.trim()) return;\n\n    setSettings(prev => ({\n      ...prev,\n      parameters: [\n        ...prev.parameters || [],\n        { id: Date.now(), name: newParameter.trim(), selected: true }\n      ]\n    }));\n    setNewParameter('');\n  };\n\n  const toggleParameter = (parameterId) => {\n    setSettings(prev => ({\n      ...prev,\n      parameters: prev.parameters.map(param =>\n        param.id === parameterId ? { ...param, selected: !param.selected } : param\n      )\n    }));\n  };\n\n  return (\n    <div className=\"parameter-container\">\n      <div className=\"parameter-header\">\n        <h2>Aspects</h2>\n        <form onSubmit={handleAdd} className=\"parameter-form\">\n          <div className=\"input-wrapper\">\n            <Tag className=\"input-icon\" size={18} />\n            <input\n              type=\"text\"\n              value={newParameter}\n              onChange={(e) => setNewParameter(e.target.value)}\n              placeholder=\"Add new aspect like pro, con or male, female, etc.\"\n              className=\"parameter-input\"\n            />\n          </div>\n          <button type=\"submit\" className=\"add-parameter-btn\">\n            <Plus size={16} />\n            Add\n          </button>\n        </form>\n      </div>\n\n      <div className=\"parameters-list\">\n        {settings.parameters?.length > 0 ? (\n          <div className=\"parameter-tags\">\n            {settings.parameters.map(param => (\n              <div \n                key={param.id}\n                className={`parameter-tag ${param.selected ? 'selected' : ''}`}\n                onClick={() => toggleParameter(param.id)}\n              >\n                <span className=\"parameter-name\">{param.name}</span>\n                <button\n                  className=\"remove-parameter\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setSettings(prev => ({\n                      ...prev,\n                      parameters: prev.parameters.filter(p => p.id !== param.id)\n                    }));\n                  }}\n                >\n                  <X size={14} />\n                </button>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"empty-parameters\">\n            Add parameters to compare search results\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ComparisionParameter;","import React, { useState, useEffect } from 'react';\nimport { Maximize2, Minimize2, ChevronDown, ChevronUp, FileText, Shuffle } from 'lucide-react';\nimport './DataSlide.css';\n\nconst MAX_CHARS = 300;\n\nconst ArticleContent = ({ content }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const shouldShowButton = content.length > MAX_CHARS;\n  const displayText = isExpanded ? content : content.slice(0, MAX_CHARS);\n\n  return (\n    <div className=\"article-content-wrapper\">\n      <p className=\"article-content\">\n        {displayText}\n        {!isExpanded && shouldShowButton && '...'}\n      </p>\n      {shouldShowButton && (\n        <button \n          className=\"expand-button\"\n          onClick={() => setIsExpanded(!isExpanded)}\n        >\n          <div className=\"button-content\">\n            {isExpanded ? (\n              <>\n                <ChevronUp size={16} />\n                <span>Show Less</span>\n              </>\n            ) : (\n              <>\n                <ChevronDown size={16} />\n                <span>Show More</span>\n              </>\n            )}\n          </div>\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst DataSlide = ({ \n  type, \n  content, \n  isActive, \n  isFullscreen, \n  onToggleFullscreen,\n  onCrossAttributeCompare,\n  activeCrossComparison,\n  otherSlidesData \n}) => {\n  const [selectedSummary, setSelectedSummary] = useState(null);\n  const [comparisonMode, setComparisonMode] = useState('articles'); // 'articles' or 'attributes'\n\n  useEffect(() => {\n    if (!isActive) {\n      setSelectedSummary(null);\n      setComparisonMode('articles');\n    }\n  }, [isActive]);\n\n  const getScoreColor = (score, mode) => {\n    // Ensure score is a number and between 0-5\n    const normalizedScore = parseFloat(score) || 0;\n    const opacity = 0.1 + ((normalizedScore / 5) * 0.5); // Adjusted opacity range\n    \n    // Blue for article relevance, Red for cross-attribute comparison\n    return mode === 'articles' \n      ? `rgba(59, 130, 246, ${opacity})` // Blue for articles\n      : `rgba(220, 38, 38, ${opacity})`; // Red for cross-attribute\n  };\n\n  const handleSummaryClick = (summary) => {\n    // Check if clicking the same summary\n    if (selectedSummary?.id === summary.id) {\n      setSelectedSummary(null);\n      setComparisonMode('articles');\n      // Clear cross-attribute comparison\n      if (onCrossAttributeCompare) {\n        onCrossAttributeCompare(null, null, false);\n      }\n    } else {\n      setSelectedSummary(summary);\n      setComparisonMode('articles');\n      // Clear cross-attribute comparison\n      if (onCrossAttributeCompare) {\n        onCrossAttributeCompare(null, null, false);\n      }\n    }\n  };\n\n  const toggleComparisonMode = (summary) => {\n    if (selectedSummary?.id === summary.id) {\n      // Toggle between article comparison and cross-attribute comparison\n      const newMode = comparisonMode === 'articles' ? 'attributes' : 'articles';\n      setComparisonMode(newMode);\n      \n      // Notify parent component about cross-attribute comparison\n      if (onCrossAttributeCompare) {\n        if (newMode === 'attributes') {\n          onCrossAttributeCompare(type, summary, true);\n        } else {\n          onCrossAttributeCompare(null, null, false);\n        }\n      }\n    } else {\n      // Select this summary and set mode to attributes\n      setSelectedSummary(summary);\n      setComparisonMode('attributes');\n      \n      // Notify parent component\n      if (onCrossAttributeCompare) {\n        onCrossAttributeCompare(type, summary, true);\n      }\n    }\n  };\n\n  const getSortedArticles = () => {\n    if (!selectedSummary || !content.articles) {\n      return content.articles;\n    }\n\n    return [...content.articles].sort((a, b) => {\n      // Get scores with fallback to 0\n      const scoreA = selectedSummary.articleScores?.[a.id] || 0;\n      const scoreB = selectedSummary.articleScores?.[b.id] || 0;\n      // Sort in descending order (highest score first)\n      return scoreB - scoreA;\n    });\n  };\n\n  const sortedArticles = getSortedArticles();\n\n  // Check if this slide is involved in cross-attribute comparison\n  const isInCrossComparison = activeCrossComparison && \n                            activeCrossComparison.isActive && \n                            activeCrossComparison.sourceType !== type;\n\n  if (!isActive && !isFullscreen) return null;\n\n  return (\n    <>\n      {isFullscreen && (\n        <div className=\"fullscreen-overlay\" onClick={onToggleFullscreen} />\n      )}\n      <div \n        className={`data-slide ${isActive ? 'active' : ''} ${isFullscreen ? 'fullscreen' : ''}`}\n      >\n        <div className=\"slide-header\">\n          <h2 className=\"slide-title\">{type}</h2>\n          <button \n            className=\"fullscreen-toggle\"\n            onClick={onToggleFullscreen}\n            aria-label={isFullscreen ? \"Exit fullscreen\" : \"Enter fullscreen\"}\n          >\n            {isFullscreen ? <Minimize2 size={20} /> : <Maximize2 size={20} />}\n          </button>\n        </div>\n        \n        <div className=\"slide-content\">\n          {isInCrossComparison && (\n            <div className=\"cross-comparison-banner\">\n              <span>Showing relevance to {activeCrossComparison.sourceType} summary</span>\n            </div>\n          )}\n          \n          <section className=\"summary-section\">\n            <h3 className=\"section-title\">Summary</h3>\n            <div className=\"summary-list\">\n              {content.summary?.map((item) => {\n                // Calculate background color for cross-attribute comparison\n                let backgroundColor = 'white';\n                if (isInCrossComparison && activeCrossComparison && activeCrossComparison.summary.crossAttributeScores) {\n                  // Check for cross-attribute score in the active comparison summary\n                  const crossScore = activeCrossComparison.summary.crossAttributeScores?.[type]?.[item.id] || 0;\n                  backgroundColor = getScoreColor(crossScore, 'attributes');\n                }\n                \n                return (\n                <div \n                  key={item.id} \n                  className={`summary-item ${selectedSummary?.id === item.id ? 'selected' : ''}`}\n                  onClick={() => handleSummaryClick(item)}\n                  style={{ backgroundColor }}\n                >\n                  <p className=\"summary-text\">{item.text}</p>\n                  <div className=\"summary-metadata\">\n                    {item.confidence && (\n                      <span className=\"metadata-item confidence\">\n                        Confidence: {(item.confidence * 100).toFixed(1)}%\n                      </span>\n                    )}\n                    {item.source_count && (\n                      <span className=\"metadata-item source-count\">\n                        Sources: {item.source_count}\n                      </span>\n                    )}\n                  </div>\n                  \n                  {/* Action buttons for selected summary */}\n                  {selectedSummary?.id === item.id && (\n                    <div className=\"summary-actions\">\n                      <button \n                        className={`action-btn ${comparisonMode === 'articles' ? 'active' : ''}`}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setComparisonMode('articles');\n                          if (onCrossAttributeCompare) {\n                            onCrossAttributeCompare(null, null, false);\n                          }\n                        }}\n                        title=\"Show article relevance (blue)\"\n                      >\n                        <FileText size={16} />\n                        <span>Article Relevance</span>\n                      </button>\n                      \n                      <button \n                        className={`action-btn cross-comparison ${comparisonMode === 'attributes' ? 'active' : ''}`}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleComparisonMode(item);\n                        }}\n                        title=\"Show cross-attribute relevance (red)\"\n                        disabled={!otherSlidesData || otherSlidesData.length === 0}\n                      >\n                        <Shuffle size={16} />\n                        <span>Cross-Aspect Comparison</span>\n                      </button>\n                    </div>\n                  )}\n                  \n                  {/* Display relevance score for cross-comparison */}\n                  {isInCrossComparison && activeCrossComparison && activeCrossComparison.summary.crossAttributeScores && (\n                    <div className=\"cross-relevance-score\">\n                      Relevance: {(activeCrossComparison.summary.crossAttributeScores?.[type]?.[item.id] || 0).toFixed(1)}/5\n                    </div>\n                  )}\n                </div>\n              )})}\n            </div>\n          </section>\n\n          <section className=\"articles-section\">\n            <h3 className=\"section-title\">Articles</h3>\n            <div className=\"articles-list\">\n              {sortedArticles?.map((article) => {\n                // Only show coloring when in articles mode and a summary is selected\n                let backgroundColor = 'white';\n                if (comparisonMode === 'articles' && selectedSummary) {\n                  const groundednessScore = selectedSummary?.articleScores?.[article.id] || 0;\n                  backgroundColor = getScoreColor(groundednessScore, 'articles');\n                }\n                \n                return (\n                  <div \n                    key={article.id} \n                    className=\"article-item\"\n                    style={{ backgroundColor }}\n                  >\n                    {/* Show score if there's a selected summary in articles mode */}\n                    {selectedSummary && comparisonMode === 'articles' && (\n                      <div className=\"groundedness-score\">\n                        Relevance: {(selectedSummary.articleScores?.[article.id] || 0).toFixed(1)}/5\n                      </div>\n                    )}\n                    <div className=\"article-header\">\n                      <h4 className=\"article-title\">{article.title}</h4>\n                    </div>\n                    <ArticleContent content={article.content} />\n                    {article.url && (\n                      <a \n                        href={article.url} \n                        className=\"article-link\" \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                      >\n                        Read more\n                      </a>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataSlide;","import React, { useState, useEffect } from 'react';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { useSettings } from '../Contexts/SettingContext';\nimport DataSlide from './DataSlide';\nimport './DataDisplay.css';\n\nconst DataDisplay = () => {\n  const { settings } = useSettings();\n  const [currentPage, setCurrentPage] = useState(0);\n  const [fullscreenSlide, setFullscreenSlide] = useState(null);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [activeCrossComparison, setActiveCrossComparison] = useState(null);\n\n  useEffect(() => {\n    setCurrentPage(0);\n  }, [settings.searchResults]);\n\n  useEffect(() => {\n    document.body.style.overflow = fullscreenSlide !== null ? 'hidden' : '';\n    return () => { document.body.style.overflow = ''; };\n  }, [fullscreenSlide]);\n\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.key === 'Escape' && fullscreenSlide !== null) {\n        setFullscreenSlide(null);\n      }\n    };\n    window.addEventListener('keydown', handleEsc);\n    return () => window.removeEventListener('keydown', handleEsc);\n  }, [fullscreenSlide]);\n\n  // Function to handle cross-attribute comparison\n  const handleCrossAttributeCompare = (sourceType, summary, isActive) => {\n    // If it's already active and we're clicking the same summary again, toggle it off\n    if (activeCrossComparison && \n        activeCrossComparison.sourceType === sourceType && \n        activeCrossComparison.summary.id === summary?.id && \n        !isActive) {\n      setActiveCrossComparison(null);\n      return;\n    }\n    \n    // If there's no source type or summary, or isActive is false, clear the comparison\n    if (!sourceType || !summary || !isActive) {\n      setActiveCrossComparison(null);\n      return;\n    }\n\n    // Otherwise, set the new active comparison\n    setActiveCrossComparison({\n      sourceType,\n      summary,\n      isActive: true\n    });\n  };\n\n  if (!settings.searchResults) {\n    return (\n      <div className=\"data-display-empty\">\n        <p>No search results available</p>\n      </div>\n    );\n  }\n\n  const allSlides = Object.entries(settings.searchResults).map(([category, data]) => ({\n    category,\n    content: {\n      summary: data.summary || [],\n      articles: data.articles || []\n    }\n  }));\n\n  // Handle single slide case\n  if (allSlides.length === 1) {\n    return (\n      <div className=\"data-display single-slide\">\n        <div className=\"carousel\">\n          <div className=\"slide-container\">\n            <DataSlide\n              key={allSlides[0].category}\n              type={allSlides[0].category}\n              content={allSlides[0].content}\n              isActive={true}\n              isFullscreen={fullscreenSlide === allSlides[0].category}\n              onToggleFullscreen={() => setFullscreenSlide(\n                fullscreenSlide === allSlides[0].category ? null : allSlides[0].category\n              )}\n              onCrossAttributeCompare={handleCrossAttributeCompare}\n              otherSlidesData={[]}\n              activeCrossComparison={activeCrossComparison}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const totalPages = Math.ceil(allSlides.length / 2);\n  const currentSlides = allSlides.slice(currentPage * 2, (currentPage * 2) + 2);\n\n  const handlePageChange = (newPage) => {\n    if (newPage >= 0 && newPage < totalPages && !isTransitioning) {\n      setIsTransitioning(true);\n      setCurrentPage(newPage);\n      setTimeout(() => setIsTransitioning(false), 300);\n    }\n  };\n\n  return (\n    <div className=\"data-display\">\n      <div className={`carousel ${fullscreenSlide ? 'fullscreen' : ''}`}>\n        {totalPages > 1 && (\n          <div className=\"carousel-controls\">\n            <button \n              className=\"carousel-button prev\"\n              onClick={() => handlePageChange(currentPage - 1)}\n              disabled={currentPage === 0 || isTransitioning}\n              aria-label=\"Previous page\"\n            >\n              <ChevronLeft size={24} />\n            </button>\n            <div className=\"carousel-dots\">\n              {Array.from({ length: totalPages }, (_, i) => (\n                <button\n                  key={i}\n                  className={`carousel-dot ${currentPage === i ? 'active' : ''}`}\n                  onClick={() => handlePageChange(i)}\n                  disabled={isTransitioning}\n                  aria-label={`Go to page ${i + 1}`}\n                />\n              ))}\n            </div>\n            <button \n              className=\"carousel-button next\"\n              onClick={() => handlePageChange(currentPage + 1)}\n              disabled={currentPage >= totalPages - 1 || isTransitioning}\n              aria-label=\"Next page\"\n            >\n              <ChevronRight size={24} />\n            </button>\n          </div>\n        )}\n\n        <div className=\"carousel-track\">\n          <div className=\"slide-container\">\n            {currentSlides.map((slide) => (\n              <DataSlide\n                key={slide.category}\n                type={slide.category}\n                content={slide.content}\n                isActive={true}\n                isFullscreen={fullscreenSlide === slide.category}\n                onToggleFullscreen={() => setFullscreenSlide(\n                  fullscreenSlide === slide.category ? null : slide.category\n                )}\n                onCrossAttributeCompare={handleCrossAttributeCompare}\n                otherSlidesData={allSlides.filter(s => s.category !== slide.category)}\n                activeCrossComparison={activeCrossComparison}\n                isInvolved={activeCrossComparison && activeCrossComparison.sourceType !== slide.category}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DataDisplay;","\nimport React, { useState } from 'react';\nimport { useSettings } from '../Contexts/SettingContext';\nimport { \n  X, Chrome, Database, Server, Settings, SortDesc, \n  FileSearch, HelpCircle, Zap, Terminal, Cpu, \n  Download, Globe, HardDrive\n} from 'lucide-react';\nimport './SettingsSidebar.css';\n\nconst SettingsSidebar = () => {\n  const { settings, setSettings } = useSettings();\n  const [generatorModelInput, setGeneratorModelInput] = useState('');\n  const [evaluatorModelInput, setEvaluatorModelInput] = useState('');\n\n  const browsers = [\n    {\n      id: 'google',\n      name: 'Google',\n      description: 'Web search using Google API',\n      icon: Chrome,\n      requiresAlgorithm: false\n    },\n    {\n      id: 'bing',\n      name: 'Microsoft Bing',\n      description: 'Web search using Bing API',\n      icon: Database,\n      requiresAlgorithm: false\n    },\n    {\n      id: 'pyterrier',\n      name: 'Pyterrier',\n      description: 'Local search engine',\n      icon: Database,\n      requiresAlgorithm: true\n    }\n    \n    \n  ];\n  const algorithms = [\n    { id: 'TFIDF', name: 'TF-IDF' },\n    { id: 'BM25', name: 'BM25' },\n    { id: 'DPR', name: 'Dense Passage Retrieval' }\n  ];\n\n  const rerankMethods = [\n    { \n      id: 'pointwise', \n      name: 'Point-wise', \n      description: 'Score documents independently' \n    },\n    { \n      id: 'pairwise', \n      name: 'Pair-wise', \n      description: 'Compare document pairs' \n    },\n    { \n      id: 'listwise', \n      name: 'List-wise', \n      description: 'Consider entire result list' \n    }\n  ];\n\n  const models = [\n    {\n      id: 'gpt-4',\n      name: 'GPT-4',\n      description: \"OpenAI's advanced model\",\n      versions: ['gpt-4-turbo', 'gpt-4']\n    },\n    {\n      id: 'claude',\n      name: 'Claude',\n      description: \"Anthropic's AI model\",\n      versions: ['claude-3', 'claude-2']\n    },\n    {\n      id: 'llama',\n      name: 'Llama',\n      description: \"Meta's open source LLM\",\n      versions: ['llama-2-70b', 'llama-2-13b']\n    },\n    {\n      id: 'huggingface',\n      name: 'HuggingFace',\n      description: \"Custom HuggingFace models\",\n      versions: ['custom']\n    }\n  ];\n\n  const modelDeploymentTypes = [\n    {\n      id: 'api',\n      name: 'API',\n      description: 'Use HuggingFace Inference API',\n      icon: Globe\n    },\n    {\n      id: 'local',\n      name: 'Local',\n      description: 'Use locally deployed model',\n      icon: HardDrive\n    }\n  ];\n\n  const judgeCategories = [\n    {\n      name: 'Context Relevance',\n      description: 'How well the response relates to the context',\n      defaultPrompt: 'How well the response relates to the context?'\n    },\n    {\n      name: 'Answer Relevance',\n      description: 'How well the response addresses the query',\n      defaultPrompt: 'How well the response relates to the context?'\n    },\n    {\n      name: 'Answer Groundedness',\n      description: 'How well the response is supported by facts',\n      defaultPrompt: 'Is the response supported by the context?'\n    },\n    {\n      name: 'Cross Attribute Relatedness',\n      description: 'How well the response is supported by facts',\n      defaultPrompt: \"On a scale of 0 to 5, where 0 means completely unrelated and 5 means highly related,\\nrate how relevant or similar these two summaries are to each other:\\n\\nSummary 1: {summary1}\\n\\nSummary 2: {summary2}\\n\\nConsider conceptual similarities, shared topics, and logical connections.\\nProvide only a numerical score between 0 and 5, with one decimal place precision.\"\n    }\n\n  ];\n\n  const handleAddHuggingFaceGeneratorModel = (e) => {\n    e.preventDefault();\n    if (!generatorModelInput.trim()) return;\n    \n    // Update the settings with the new model\n    setSettings(prev => {\n      const updatedSettings = {\n        ...prev,\n        huggingface: {\n          ...prev.huggingface,\n          generatorModels: [\n            ...(prev.huggingface?.generatorModels || []),\n            {\n              id: generatorModelInput,\n              name: generatorModelInput,\n              isLoaded: false\n            }\n          ]\n        }\n      };\n      \n      // If this is the first model, set it as the selected model\n      if (!prev.huggingface?.generatorModels?.length) {\n        updatedSettings.huggingface.selectedGeneratorModel = generatorModelInput;\n      }\n      \n      return updatedSettings;\n    });\n    \n    setGeneratorModelInput('');\n  };\n\n  const handleAddHuggingFaceEvaluatorModel = (e) => {\n    e.preventDefault();\n    if (!evaluatorModelInput.trim()) return;\n    \n    setSettings(prev => {\n      const updatedSettings = {\n        ...prev,\n        huggingface: {\n          ...prev.huggingface,\n          evaluatorModels: [\n            ...(prev.huggingface?.evaluatorModels || []),\n            {\n              id: evaluatorModelInput,\n              name: evaluatorModelInput,\n              isLoaded: false\n            }\n          ]\n        }\n      };\n      \n      // If this is the first model, set it as the selected model\n      if (!prev.huggingface?.evaluatorModels?.length) {\n        updatedSettings.huggingface.selectedEvaluatorModel = evaluatorModelInput;\n      }\n      \n      return updatedSettings;\n    });\n    \n    setEvaluatorModelInput('');\n  };\n\n  const removeHuggingFaceModel = (modelId, type) => {\n    setSettings(prev => {\n      const modelListKey = type === 'generator' ? 'generatorModels' : 'evaluatorModels';\n      const selectedModelKey = type === 'generator' ? 'selectedGeneratorModel' : 'selectedEvaluatorModel';\n      \n      const updatedModels = prev.huggingface?.[modelListKey].filter(model => model.id !== modelId) || [];\n      \n      // If the removed model was selected, update the selected model\n      let selectedModel = prev.huggingface?.[selectedModelKey];\n      if (selectedModel === modelId && updatedModels.length > 0) {\n        selectedModel = updatedModels[0].id;\n      } else if (updatedModels.length === 0) {\n        selectedModel = null;\n      }\n      \n      return {\n        ...prev,\n        huggingface: {\n          ...prev.huggingface,\n          [modelListKey]: updatedModels,\n          [selectedModelKey]: selectedModel\n        }\n      };\n    });\n  };\n\n  const loadHuggingFaceModel = async (modelId, type) => {\n    // Here we'll update the UI to show loading state\n    setSettings(prev => {\n      const modelListKey = type === 'generator' ? 'generatorModels' : 'evaluatorModels';\n      \n      return {\n        ...prev,\n        huggingface: {\n          ...prev.huggingface,\n          [`${type}Loading`]: modelId\n        }\n      };\n    });\n\n    // In a real implementation, we would make an API call to the backend\n    // to load the model. Here we'll just simulate it with a timeout.\n    try {\n      // This would be replaced with an actual API call\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Update model state after successful loading\n      setSettings(prev => {\n        const modelListKey = type === 'generator' ? 'generatorModels' : 'evaluatorModels';\n        \n        return {\n          ...prev,\n          huggingface: {\n            ...prev.huggingface,\n            [`${type}Loading`]: null,\n            [modelListKey]: prev.huggingface[modelListKey].map(model => \n              model.id === modelId ? { ...model, isLoaded: true } : model\n            )\n          }\n        };\n      });\n    } catch (error) {\n      console.error(`Error loading ${type} model:`, error);\n      \n      // Update UI on error\n      setSettings(prev => ({\n        ...prev,\n        huggingface: {\n          ...prev.huggingface,\n          [`${type}Loading`]: null\n        }\n      }));\n    }\n  };\n\n  const renderBrowserSelector = () => (\n    <div className=\"settings-section\">\n      <div className=\"section-header\">\n        <Settings size={20} />\n        <h3>Search Engine</h3>\n      </div>\n\n      <div className=\"browser-options\">\n        {browsers.map((browser) => (\n          <label \n            key={browser.id}\n            className={`browser-option ${settings.browser === browser.id ? 'selected' : ''}`}\n          >\n            <input\n              type=\"radio\"\n              name=\"browser\"\n              value={browser.id}\n              checked={settings.browser === browser.id}\n              onChange={(e) => {\n                setSettings(prev => ({\n                  ...prev,\n                  browser: e.target.value\n                }));\n              }}\n              className=\"sr-only\"\n            />\n            <div className=\"browser-content\">\n              <div className=\"browser-icon\">\n                <browser.icon size={20} />\n              </div>\n              <div className=\"browser-info\">\n                <div className=\"browser-name\">{browser.name}</div>\n                <div className=\"browser-description\">{browser.description}</div>\n              </div>\n            </div>\n          </label>\n        ))}\n      </div>\n\n      {(settings.browser === 'pyterrier' || settings.browser === 'pyserini') && (\n        <div className=\"algorithm-section\">\n          <label className=\"section-label\">Search Algorithm</label>\n          <select\n            value={settings.searchAlgorithm}\n            onChange={(e) => {\n              setSettings(prev => ({\n                ...prev,\n                searchAlgorithm: e.target.value\n              }));\n            }}\n            className=\"algorithm-select\"\n          >\n            {algorithms.map(algo => (\n              <option key={algo.id} value={algo.id}>\n                {algo.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderGeneratorSettings = () => (\n    <div className=\"settings-section\">\n      <div className=\"section-header\">\n        <Zap size={20} />\n        <h3>Generator Settings</h3>\n      </div>\n\n      <div className=\"model-options\">\n        {models.map((model) => (\n          <label\n            key={model.id}\n            className={`model-option ${settings.generator === model.id ? 'selected' : ''}`}\n          >\n            <input\n              type=\"radio\"\n              name=\"generator\"\n              checked={settings.generator === model.id}\n              onChange={() => setSettings(prev => ({\n                ...prev,\n                generator: model.id,\n                model: model.id === 'huggingface' ? 'custom' : model.versions[0]\n              }))}\n              className=\"sr-only\"\n            />\n            <div className=\"model-content\">\n              <div className=\"model-info\">\n                <div className=\"model-name\">{model.name}</div>\n                <div className=\"model-description\">{model.description}</div>\n              </div>\n            </div>\n          </label>\n        ))}\n      </div>\n\n      {settings.generator === 'huggingface' ? (\n        <div className=\"huggingface-section\">\n          {/* Deployment Type Selection */}\n          <div className=\"deployment-section\">\n            <label className=\"section-label\">Deployment Type</label>\n            <div className=\"deployment-options\">\n              {modelDeploymentTypes.map(type => (\n                <label\n                  key={type.id}\n                  className={`deployment-option ${settings.huggingface?.generatorDeployment === type.id ? 'selected' : ''}`}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"generatorDeployment\"\n                    value={type.id}\n                    checked={settings.huggingface?.generatorDeployment === type.id}\n                    onChange={() => {\n                      setSettings(prev => ({\n                        ...prev,\n                        huggingface: {\n                          ...prev.huggingface,\n                          generatorDeployment: type.id\n                        }\n                      }));\n                    }}\n                    className=\"sr-only\"\n                  />\n                  <div className=\"deployment-content\">\n                    <div className=\"deployment-icon\">\n                      <type.icon size={20} />\n                    </div>\n                    <div className=\"deployment-info\">\n                      <div className=\"deployment-name\">{type.name}</div>\n                      <div className=\"deployment-description\">{type.description}</div>\n                    </div>\n                  </div>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* API Key for API deployment */}\n          {settings.huggingface?.generatorDeployment === 'api' && (\n            <div className=\"config-group\">\n              <label className=\"section-label\" htmlFor=\"huggingfaceApiKey\">\n                HuggingFace API Key\n              </label>\n              <input\n                id=\"huggingfaceApiKey\"\n                type=\"password\"\n                className=\"api-input\"\n                placeholder=\"Enter your HuggingFace API key\"\n                value={settings.huggingface?.apiKey || ''}\n                onChange={(e) => setSettings(prev => ({\n                  ...prev,\n                  huggingface: {\n                    ...prev.huggingface,\n                    apiKey: e.target.value\n                  }\n                }))}\n              />\n            </div>\n          )}\n\n          {/* Model Selection and Management */}\n          <div className=\"model-management\">\n            <h4 className=\"management-title\">Generator Models</h4>\n            \n            <form onSubmit={handleAddHuggingFaceGeneratorModel} className=\"add-model-form\">\n              <input\n                type=\"text\"\n                value={generatorModelInput}\n                onChange={(e) => setGeneratorModelInput(e.target.value)}\n                placeholder=\"Enter model name or path\"\n                className=\"model-input\"\n              />\n              <button \n                type=\"submit\" \n                className=\"add-model-btn\"\n                disabled={!generatorModelInput.trim()}\n              >\n                Add Model\n              </button>\n            </form>\n            \n            <div className=\"models-list\">\n              {settings.huggingface?.generatorModels?.length > 0 ? (\n                settings.huggingface.generatorModels.map(model => (\n                  <div key={model.id} className=\"model-item\">\n                    <div className=\"model-item-info\">\n                      <input\n                        type=\"radio\"\n                        name=\"selectedGeneratorModel\"\n                        checked={settings.huggingface?.selectedGeneratorModel === model.id}\n                        onChange={() => {\n                          setSettings(prev => ({\n                            ...prev,\n                            huggingface: {\n                              ...prev.huggingface,\n                              selectedGeneratorModel: model.id\n                            }\n                          }));\n                        }}\n                      />\n                      <span className=\"model-item-name\">{model.name}</span>\n                      <span className={`model-status ${model.isLoaded ? 'loaded' : 'not-loaded'}`}>\n                        {model.isLoaded ? 'Loaded' : 'Not Loaded'}\n                      </span>\n                    </div>\n                    <div className=\"model-item-actions\">\n                      {!model.isLoaded && (\n                        <button \n                          className=\"load-model-btn\"\n                          onClick={() => loadHuggingFaceModel(model.id, 'generator')}\n                          disabled={settings.huggingface?.generatorLoading === model.id}\n                        >\n                          {settings.huggingface?.generatorLoading === model.id ? (\n                            <span className=\"loading-spinner\">Loading...</span>\n                          ) : (\n                            <>\n                              <Download size={14} />\n                              <span>Load</span>\n                            </>\n                          )}\n                        </button>\n                      )}\n                      <button \n                        className=\"remove-model-btn\"\n                        onClick={() => removeHuggingFaceModel(model.id, 'generator')}\n                        disabled={settings.huggingface?.generatorLoading === model.id}\n                      >\n                        <X size={14} />\n                      </button>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"empty-models\">\n                  No generator models added. Add a model to get started.\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Generator Parameters */}\n          <div className=\"model-parameters\">\n            <h4 className=\"parameters-title\">Generation Parameters</h4>\n            <div className=\"parameter-fields\">\n              <div className=\"parameter-group\">\n                <label className=\"param-label\" htmlFor=\"maxNewTokens\">Max New Tokens</label>\n                <input\n                  id=\"maxNewTokens\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"4096\"\n                  className=\"param-input\"\n                  value={settings.huggingface?.generatorParams?.maxNewTokens || 512}\n                  onChange={(e) => setSettings(prev => ({\n                    ...prev,\n                    huggingface: {\n                      ...prev.huggingface,\n                      generatorParams: {\n                        ...prev.huggingface?.generatorParams,\n                        maxNewTokens: parseInt(e.target.value)\n                      }\n                    }\n                  }))}\n                />\n              </div>\n\n              <div className=\"parameter-group\">\n                <label className=\"param-label\" htmlFor=\"temperature\">Temperature</label>\n                <input\n                  id=\"temperature\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"2\"\n                  step=\"0.1\"\n                  className=\"param-input\"\n                  value={settings.huggingface?.generatorParams?.temperature || 0.7}\n                  onChange={(e) => setSettings(prev => ({\n                    ...prev,\n                    huggingface: {\n                      ...prev.huggingface,\n                      generatorParams: {\n                        ...prev.huggingface?.generatorParams,\n                        temperature: parseFloat(e.target.value)\n                      }\n                    }\n                  }))}\n                />\n              </div>\n\n              <div className=\"parameter-group\">\n                <label className=\"param-label\" htmlFor=\"topP\">Top P</label>\n                <input\n                  id=\"topP\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"1\"\n                  step=\"0.05\"\n                  className=\"param-input\"\n                  value={settings.huggingface?.generatorParams?.topP || 0.95}\n                  onChange={(e) => setSettings(prev => ({\n                    ...prev,\n                    huggingface: {\n                      ...prev.huggingface,\n                      generatorParams: {\n                        ...prev.huggingface?.generatorParams,\n                        topP: parseFloat(e.target.value)\n                      }\n                    }\n                  }))}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"model-config\">\n          <div className=\"config-group\">\n            <label className=\"section-label\" htmlFor=\"modelVersion\">\n              Model Version\n            </label>\n            <select\n              id=\"modelVersion\"\n              className=\"model-select\"\n              value={settings.model}\n              onChange={(e) => setSettings(prev => ({\n                ...prev,\n                model: e.target.value\n              }))}\n            >\n              {models\n                .find(m => m.id === settings.generator)\n                ?.versions.map(version => (\n                  <option key={version} value={version}>\n                    {version}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          <div className=\"config-group\">\n            <label className=\"section-label\" htmlFor=\"apiKey\">\n              API Key\n              <button \n                type=\"button\" \n                className=\"help-button\"\n                title=\"Required for API access\"\n              >\n                <HelpCircle size={16} />\n              </button>\n            </label>\n            <input\n              id=\"apiKey\"\n              type=\"password\"\n              className=\"api-input\"\n              placeholder=\"Enter your API key\"\n              value={settings.apiKey}\n              onChange={(e) => setSettings(prev => ({\n                ...prev,\n                apiKey: e.target.value\n              }))}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderReranker = () => (\n    <div className=\"settings-section\">\n      <div className=\"section-header\">\n        <SortDesc size={20} />\n        <h3>Reranking</h3>\n      </div>\n\n      <div className=\"reranker-content\">\n        <label className=\"enable-option\">\n          <input\n            type=\"checkbox\"\n            checked={settings.reranker?.isEnabled}\n            onChange={(e) => {\n              setSettings(prev => ({\n                ...prev,\n                reranker: {\n                  ...prev.reranker,\n                  isEnabled: e.target.checked\n                }\n              }));\n            }}\n            className=\"enable-checkbox\"\n          />\n          <span>Enable Reranking</span>\n        </label>\n\n        {settings.reranker?.isEnabled && (\n          <>\n            <div className=\"prompt-section\">\n              <label className=\"section-label\">Reranking Prompt</label>\n              <div className=\"prompt-controls\">\n                <button \n                  className=\"reset-button\"\n                  onClick={() => {\n                    setSettings(prev => ({\n                      ...prev,\n                      reranker: {\n                        ...prev.reranker,\n                        prompt: 'Rerank the documents based on relevance to the query while maintaining diversity of information.'\n                      }\n                    }));\n                  }}\n                >\n                  Reset to Default\n                </button>\n              </div>\n              <textarea\n                value={settings.reranker?.prompt || ''}\n                onChange={(e) => {\n                  setSettings(prev => ({\n                    ...prev,\n                    reranker: {\n                      ...prev.reranker,\n                      prompt: e.target.value\n                    }\n                  }));\n                }}\n                placeholder=\"Enter reranking prompt...\"\n                className=\"prompt-input\"\n                rows={4}\n              />\n            </div>\n\n            <div className=\"method-section\">\n              <label className=\"section-label\">Reranking Method</label>\n              <div className=\"method-options\">\n                {rerankMethods.map(method => (\n                  <label\n                    key={method.id}\n                    className={`method-option ${settings.reranker?.method === method.id ? 'selected' : ''}`}\n                  >\n                    <input\n                      type=\"radio\"\n                      name=\"rerankMethod\"\n                      value={method.id}\n                      checked={settings.reranker?.method === method.id}\n                      onChange={(e) => {\n                        setSettings(prev => ({\n                          ...prev,\n                          reranker: {\n                            ...prev.reranker,\n                            method: e.target.value\n                          }\n                        }));\n                      }}\n                      className=\"sr-only\"\n                    />\n                    <div className=\"method-content\">\n                      <div className=\"method-info\">\n                        <div className=\"method-name\">{method.name}</div>\n                        <div className=\"method-description\">{method.description}</div>\n                      </div>\n                    </div>\n                  </label>\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderQueryReformulation = () => (\n    <div className=\"settings-section\">\n      <div className=\"section-header\">\n        <FileSearch size={20} />\n        <h3>Query Reformulation</h3>\n      </div>\n\n      <div className=\"reformulation-content\">\n        <label className=\"enable-option\">\n          <input\n            type=\"checkbox\"\n            checked={settings.queryReformulation?.isEnabled}\n            onChange={(e) => {\n              setSettings(prev => ({\n                ...prev,\n                queryReformulation: {\n                  ...prev.queryReformulation,\n                  isEnabled: e.target.checked\n                }\n              }));\n            }}\n            className=\"enable-checkbox\"\n          />\n          <span>Enable Query Reformulation</span>\n        </label>\n\n        {settings.queryReformulation?.isEnabled && (\n          <div className=\"prompt-section\">\n            <label className=\"section-label\">Reformulation Prompt</label>\n            <div className=\"prompt-controls\">\n              <button \n                className=\"reset-button\"\n                onClick={() => {\n                  setSettings(prev => ({\n                    ...prev,\n                    queryReformulation: {\n                      ...prev.queryReformulation,\n                      prompt: 'Analyze the user query and reformulate it to improve search results while maintaining the original intent.'\n                    }\n                  }));\n                }}\n              >\n                Reset to Default\n              </button>\n            </div>\n            <textarea\n              value={settings.queryReformulation?.prompt || ''}\n              onChange={(e) => {\n                setSettings(prev => ({\n                  ...prev,\n                  queryReformulation: {\n                    ...prev.queryReformulation,\n                    prompt: e.target.value\n                  }\n                }));\n              }}\n              placeholder=\"Enter reformulation prompt...\"\n              className=\"prompt-input\"\n              rows={4}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderHuggingFaceEvaluator = () => (\n    <div className=\"settings-section\">\n      <div className=\"section-header\">\n        <Cpu size={20} />\n        <h3>HuggingFace Evaluator</h3>\n      </div>\n      \n      <div className=\"enable-evaluator\">\n        <label className=\"enable-option\">\n          <input\n            type=\"checkbox\"\n            checked={settings.huggingface?.evaluatorEnabled}\n            onChange={(e) => {\n              setSettings(prev => ({\n                ...prev,\n                huggingface: {\n                  ...prev.huggingface,\n                  evaluatorEnabled: e.target.checked\n                }\n              }));\n            }}\n            className=\"enable-checkbox\"\n          />\n          <span>Use HuggingFace for Evaluation</span>\n        </label>\n      </div>\n\n      {settings.huggingface?.evaluatorEnabled && (\n        <>\n          {/* Deployment Type Selection */}\n          <div className=\"deployment-section\">\n            <label className=\"section-label\">Deployment Type</label>\n            <div className=\"deployment-options\">\n              {modelDeploymentTypes.map(type => (\n                <label\n                  key={type.id}\n                  className={`deployment-option ${settings.huggingface?.evaluatorDeployment === type.id ? 'selected' : ''}`}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"evaluatorDeployment\"\n                    value={type.id}\n                    checked={settings.huggingface?.evaluatorDeployment === type.id}\n                    onChange={() => {\n                      setSettings(prev => ({\n                        ...prev,\n                        huggingface: {\n                          ...prev.huggingface,\n                          evaluatorDeployment: type.id\n                        }\n                      }));\n                    }}\n                    className=\"sr-only\"\n                  />\n                  <div className=\"deployment-content\">\n                    <div className=\"deployment-icon\">\n                      <type.icon size={20} />\n                    </div>\n                    <div className=\"deployment-info\">\n                      <div className=\"deployment-name\">{type.name}</div>\n                      <div className=\"deployment-description\">{type.description}</div>\n                    </div>\n                  </div>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* API Key for API deployment (only if different from generator) */}\n          {settings.huggingface?.evaluatorDeployment === 'api' && (\n            <div className=\"config-group\">\n              <label className=\"section-label\" htmlFor=\"evaluatorApiKey\">\n                Use same API key as generator\n                <input\n                  type=\"checkbox\"\n                  checked={settings.huggingface?.useGeneratorApiKey}\n                  onChange={(e) => {\n                    setSettings(prev => ({\n                      ...prev,\n                      huggingface: {\n                        ...prev.huggingface,\n                        useGeneratorApiKey: e.target.checked\n                      }\n                    }));\n                  }}\n                  className=\"same-api-checkbox\"\n                />\n              </label>\n              \n              {!settings.huggingface?.useGeneratorApiKey && (\n                <input\n                  id=\"evaluatorApiKey\"\n                  type=\"password\"\n                  className=\"api-input\"\n                  placeholder=\"Enter your HuggingFace API key for evaluation\"\n                  value={settings.huggingface?.evaluatorApiKey || ''}\n                  onChange={(e) => setSettings(prev => ({\n                    ...prev,\n                    huggingface: {\n                      ...prev.huggingface,\n                      evaluatorApiKey: e.target.value\n                    }\n                  }))}\n                />\n              )}\n            </div>\n          )}\n\n          {/* Model Selection and Management */}\n          <div className=\"model-management\">\n            <h4 className=\"management-title\">Evaluator Models</h4>\n            \n            <form onSubmit={handleAddHuggingFaceEvaluatorModel} className=\"add-model-form\">\n              <input\n                type=\"text\"\n                value={evaluatorModelInput}\n                onChange={(e) => setEvaluatorModelInput(e.target.value)}\n                placeholder=\"Enter model name or path\"\n                className=\"model-input\"\n              />\n              <button \n                type=\"submit\" \n                className=\"add-model-btn\"\n                disabled={!evaluatorModelInput.trim()}\n              >\n                Add Model\n              </button>\n            </form>\n            \n            <div className=\"models-list\">\n              {settings.huggingface?.evaluatorModels?.length > 0 ? (\n                settings.huggingface.evaluatorModels.map(model => (\n                  <div key={model.id} className=\"model-item\">\n                    <div className=\"model-item-info\">\n                      <input\n                        type=\"radio\"\n                        name=\"selectedEvaluatorModel\"\n                        checked={settings.huggingface?.selectedEvaluatorModel === model.id}\n                        onChange={() => {\n                          setSettings(prev => ({\n                            ...prev,\n                            huggingface: {\n                              ...prev.huggingface,\n                              selectedEvaluatorModel: model.id\n                            }\n                          }));\n                        }}\n                      />\n                      <span className=\"model-item-name\">{model.name}</span>\n                      <span className={`model-status ${model.isLoaded ? 'loaded' : 'not-loaded'}`}>\n                        {model.isLoaded ? 'Loaded' : 'Not Loaded'}\n                      </span>\n                    </div>\n                    <div className=\"model-item-actions\">\n                      {!model.isLoaded && (\n                        <button \n                          className=\"load-model-btn\"\n                          onClick={() => loadHuggingFaceModel(model.id, 'evaluator')}\n                          disabled={settings.huggingface?.evaluatorLoading === model.id}\n                        >\n                          {settings.huggingface?.evaluatorLoading === model.id ? (\n                            <span className=\"loading-spinner\">Loading...</span>\n                          ) : (\n                            <>\n                              <Download size={14} />\n                              <span>Load</span>\n                            </>\n                          )}\n                        </button>\n                      )}\n                      <button \n                        className=\"remove-model-btn\"\n                        onClick={() => removeHuggingFaceModel(model.id, 'evaluator')}\n                        disabled={settings.huggingface?.evaluatorLoading === model.id}\n                      >\n                        <X size={14} />\n                      </button>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"empty-models\">\n                  No evaluator models added. Add a model to get started.\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Evaluator Parameters */}\n          <div className=\"model-parameters\">\n            <h4 className=\"parameters-title\">Evaluation Parameters</h4>\n            <div className=\"parameter-fields\">\n              <div className=\"parameter-group\">\n                <label className=\"param-label\" htmlFor=\"evalBatchSize\">Batch Size</label>\n                <input\n                  id=\"evalBatchSize\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"32\"\n                  className=\"param-input\"\n                  value={settings.huggingface?.evaluatorParams?.batchSize || 4}\n                  onChange={(e) => setSettings(prev => ({\n                    ...prev,\n                    huggingface: {\n                      ...prev.huggingface,\n                      evaluatorParams: {\n                        ...prev.huggingface?.evaluatorParams,\n                        batchSize: parseInt(e.target.value)\n                      }\n                    }\n                  }))}\n                />\n              </div>\n\n              <div className=\"parameter-group\">\n                <label className=\"param-label\" htmlFor=\"evalTemperature\">Temperature</label>\n                <input\n                  id=\"evalTemperature\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"2\"\n                  step=\"0.1\"\n                  className=\"param-input\"\n                  value={settings.huggingface?.evaluatorParams?.temperature || 0.3}\n                  onChange={(e) => setSettings(prev => ({\n                    ...prev,\n                    huggingface: {\n                      ...prev.huggingface,\n                      evaluatorParams: {\n                        ...prev.huggingface?.evaluatorParams,\n                        temperature: parseFloat(e.target.value)\n                      }\n                    }\n                  }))}\n                />\n              </div>\n\n              <div className=\"parameter-group\">\n                <label className=\"param-label\" htmlFor=\"evalMaxTokens\">Max Tokens</label>\n                <input\n                  id=\"evalMaxTokens\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"512\"\n                  className=\"param-input\"\n                  value={settings.huggingface?.evaluatorParams?.maxTokens || 128}\n                  onChange={(e) => setSettings(prev => ({\n                    ...prev,\n                    huggingface: {\n                      ...prev.huggingface,\n                      evaluatorParams: {\n                        ...prev.huggingface?.evaluatorParams,\n                        maxTokens: parseInt(e.target.value)\n                      }\n                    }\n                  }))}\n                />\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  const renderLLMJudge = () => (\n    <div className=\"settings-section\">\n      <div className=\"section-header\">\n        <Terminal size={20} />\n        <h3>Evaluation Parameters</h3>\n      </div>\n\n      {judgeCategories.map((category) => (\n        <div key={category.name} className=\"judge-category\">\n          <div className=\"category-header\">\n            <h4 className=\"category-title\">{category.name}</h4>\n            <p className=\"category-description\">{category.description}</p>\n            <label className=\"checkbox-label\">\n              <input\n                type=\"checkbox\"\n                checked={settings.llmJudge?.enabledCategories?.[category.name] ?? true}\n                onChange={() => {\n                  setSettings(prev => ({\n                    ...prev,\n                    llmJudge: {\n                      ...prev.llmJudge,\n                      enabledCategories: {\n                        ...prev.llmJudge?.enabledCategories,\n                        [category.name]: !(prev.llmJudge?.enabledCategories?.[category.name] ?? true)\n                      }\n                    }\n                  }));\n                }}\n                className=\"category-checkbox\"\n              />\n              <span>Evaluate using this</span>\n            </label>\n          </div>\n          \n          <div className=\"prompt-section\">\n            <div className=\"prompt-controls\">\n              <button \n                className=\"reset-button\"\n                onClick={() => {\n                  setSettings(prev => ({\n                    ...prev,\n                    llmJudge: {\n                      ...prev.llmJudge,\n                      prompts: {\n                        ...prev.llmJudge?.prompts,\n                        [category.name]: category.defaultPrompt\n                      }\n                    }\n                  }));\n                }}\n                disabled={!settings.llmJudge?.enabledCategories?.[category.name]}\n              >\n                Reset to Default\n              </button>\n            </div>\n            <textarea\n              className=\"prompt-input\"\n              value={settings.llmJudge?.prompts?.[category.name] || category.defaultPrompt}\n              onChange={(e) => {\n                setSettings(prev => ({\n                  ...prev,\n                  llmJudge: {\n                    ...prev.llmJudge,\n                    prompts: {\n                      ...prev.llmJudge?.prompts,\n                      [category.name]: e.target.value\n                    }\n                  }\n                }));\n              }}\n              placeholder={`Enter prompt for ${category.name} evaluation`}\n              rows={4}\n              disabled={!settings.llmJudge?.enabledCategories?.[category.name]}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  return (\n    <>\n      {settings.isSettingsOpen && (\n        <div className=\"settings-overlay\" onClick={() => setSettings(prev => ({ ...prev, isSettingsOpen: false }))} />\n      )}\n      \n      <aside className={`settings-sidebar ${settings.isSettingsOpen ? 'open' : ''}`}>\n        <div className=\"settings-header\">\n          <h2>Settings</h2>\n          <button \n            className=\"close-button\"\n            onClick={() => setSettings(prev => ({ ...prev, isSettingsOpen: false }))}\n            aria-label=\"Close settings\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        <div className=\"settings-content\">\n          {renderBrowserSelector()}\n          <div className=\"settings-divider\" />\n          {renderGeneratorSettings()}\n          <div className=\"settings-divider\" />\n          {renderReranker()}\n          <div className=\"settings-divider\" />\n          {renderQueryReformulation()}\n          <div className=\"settings-divider\" />\n          {renderHuggingFaceEvaluator()}\n          <div className=\"settings-divider\" />\n          {renderLLMJudge()}\n        </div>\n      </aside>\n    </>\n  );\n};\n\nexport default SettingsSidebar;","// import React, { useState } from 'react';\n// import Navbar from './components/Navbar';\n// import SearchBox from './components/SearchBox/SearchBox';\n// import DisplaySection from './components/DisplaySection';\n// import './styles/App.css';\n// import './styles/responsive.css';\n\n// function App() {\n//   const [searchText, setSearchText] = useState('');\n//   const [searchResults, setSearchResults] = useState(null);\n\n//   const handleSearchResults = (results) => {\n//     setSearchResults(results);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <Navbar />\n//       <main className=\"main-content\">\n//         <SearchBox \n//           searchText={searchText} \n//           setSearchText={setSearchText}\n//           onSearchResults={handleSearchResults}\n//         />\n//         <div className=\"pros-cons-container\">\n//           <DisplaySection displayData={searchResults?.genre || []} />\n//         </div>\n//       </main>\n//     </div>\n//   );\n// }\n\n\nimport React, { useState } from 'react';\nimport { SettingsProvider } from './components/Contexts/SettingContext';\nimport Navbar from './components/Navbar';\nimport SearchBox from './components/SearchBox';\nimport ComparisionParameter from './components/ComparisonPrameters';\nimport DataDisplay from './components/DataDisplay';\nimport SettingsSidebar from './components/SettingsSidebar';\nimport './styles/App.css';\n\nconst App = () => {\n  const [searchText, setSearchText] = useState('');\n\n  return (\n    <SettingsProvider>\n      <div className=\"app\">\n        <Navbar />\n        <main className=\"main-content\">\n          <SearchBox \n            searchText={searchText}\n            setSearchText={setSearchText}\n          />\n          <ComparisionParameter />\n          <DataDisplay />\n        </main>\n        <SettingsSidebar />\n      </div>\n    </SettingsProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n    <p>commit</p>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}